const paginate = (schema: any) => {
    schema.statics.paginate = async function (srvFilter: any, usrFilter: any, options: any) {
        let sort = '';
        options = options ?? {};
        srvFilter = srvFilter ?? {};
        usrFilter = usrFilter ?? {};

        if (options.sortBy) {
            sort = options.sortBy.split(',').join(' ');
            sort = sort + ' ' + '_id';
        } else {
            sort = '_id';
        }

        const perPage =
            options.perPage && parseInt(options.perPage, 10) > 0
                ? parseInt(options.perPage, 10)
                : 10;
        const page =
            options.page && parseInt(options.page, 10) > 0 ? parseInt(options.page, 10) : 1;
        const skip = (page - 1) * perPage;

        let filter: any = {};
        //First copy the user provided filters (API filters)
        for (let key in usrFilter) {
            filter[key] = usrFilter[key];
        }
        //Then copy the middleware servier provided filters. Note: The internal filter overrides external filters if there is an overlap.
        for (let key in srvFilter) {
            filter[key] = srvFilter[key];
        }

        const countPromise = this.countDocuments(filter).exec();
        let docPromise = this.find(filter).sort(sort).skip(skip).limit(perPage);

        if (options.populate) {
            options.populate.split(',').forEach((populateOption: any) => {
                docPromise = docPromise.populate(
                    populateOption
                        .split('.')
                        .reverse()
                        .reduce((a: any, b: any) => ({ path: b, populate: a }))
                );
            });
        }

        if (options.select) {
            docPromise = docPromise.select(options.select);
        }

        docPromise = docPromise.exec();

        return Promise.all([countPromise, docPromise]).then((values) => {
            const [totalResults, results] = values;
            const totalPages = Math.ceil(totalResults / perPage);
            const pagination = {
                currentPage: page,
                pageCount: totalPages,
                perPage: perPage,
                totalCount: totalResults
            };
            const result = {
                results,
                pagination
            };
            return Promise.resolve(result);
        });
    };
};

export default paginate;

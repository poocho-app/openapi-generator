import * as http from 'http';
import * as fs from 'fs';
import * as path from 'path';
import * as swaggerUI from 'swagger-ui-express';
import jsYaml from 'js-yaml';
import express, { Express } from 'express';
import cors from 'cors';
import cookieParser from 'cookie-parser';
import * as OpenApiValidator from 'express-openapi-validator';
import logger from '#drivers/logger';
import config from '#root/config';
import * as httpStatus from 'http-status';
import * as morgan from '#drivers/morgan';
import APIError, { WrapError } from '#drivers/api-error';
import * as controllerHandlers from '#controllers';
import { OpenAPIV3, OperationHandlerOptions } from 'express-openapi-validator/dist/framework/types';
import { RouteMetadata } from 'express-openapi-validator/dist/framework/openapi.spec.loader';

export default class Server {
    port: number;
    app: Express;
    openApiPath: string;
    schema!: object;
    server!: http.Server;

    constructor(port: number, openApiYaml: string) {
        this.port = port;
        this.app = express();
        this.openApiPath = openApiYaml;

        try {
            logger.debug(openApiYaml);
            this.schema = <object>jsYaml.load(fs.readFileSync(openApiYaml).toString());
        } catch (e) {
            logger.error('failed to start Express Server', (e as Error).message);
            throw e;
        }
        this.setupMiddleware();
    }

    setupMiddleware() {
        // this.setupAllowedMedia();
        this.app.use(morgan.successHandler);
        this.app.use(morgan.errorHandler);

        this.app.use(cors());
        this.app.use(express.json());
        this.app.use(express.urlencoded({ extended: false }));
        this.app.use(cookieParser());

        if (config.NODE_ENV === 'development') {
            //FIXME: Remove later. Simple test to see that the server is up and responding
            this.app.get('/hello', (req, res) =>
                res.send(`Hello World. path: ${this.openApiPath}`)
            );
            //Send the openapi document *AS GENERATED BY THE GENERATOR*
            this.app.get('/openapi', (req, res) =>
                res.sendFile(path.join(config.ROOT_DIR, 'api', 'openapi.yaml'))
            );
            //View the openapi document in a visual interface. Should be able to test from this page
            this.app.use('/api-docs', swaggerUI.serve, swaggerUI.setup(this.schema));
        }

        //FIXME: Use validator package to setup format validators for phone number, email, postal code etc..
        const validator = OpenApiValidator.middleware({
            apiSpec: this.openApiPath,
            operationHandlers: <OperationHandlerOptions>{
                basePath: path.join(config.ROOT_DIR, 'build'),
                resolver: (basePath: string, route: RouteMetadata, apiDoc: OpenAPIV3.Document) => {
                    const pathKey = route.openApiRoute.substring(route.basePath.length);
                    //@ts-ignore -> The line below id dynamicaly fetchng the schema based on the http method captured in route.
                    const schema = apiDoc.paths[pathKey][route.method.toLowerCase()];
                    const functionName = schema['operationId'];

                    //@ts-ignore -> The line below is dynamicaly fetchng the handler method based on the route.
                    return controllerHandlers[functionName];
                }
            },
            fileUploader: { dest: config.FILE_UPLOAD_PATH },
            validateResponses: config.NODE_ENV === 'development' ? true : false //Always validate requests, but validate responses only in development.
        });
        this.app.use(validator);
    }

    launch() {
        // TODO: If controller handles the errors and processes them  in sendError,
        // will the error handlers be called in the middleware? Must check this later on.
        // Regardless, we'll have these error handlers here  as a fail safe to handle something
        // that was not already caught by the controller.
        //Error Handler
        this.app.use((err: Error, req: any, res: any, next: any) => {
            let apiErr: APIError = WrapError(
                'Internal Server Error',
                httpStatus.INTERNAL_SERVER_ERROR,
                err
            );
            logger.error('Exception: ', apiErr);
            res.status(apiErr.statusCode).send(apiErr.combinedMessage());
        });

        /* End of Default error handlers */
        this.server = http.createServer(this.app).listen(this.port);
        console.log(`Listening on port ${this.port}`);
    }

    async close() {
        if (this.server !== undefined) {
            await this.server.close();
            console.log(`Server on port ${this.port} shut down`);
        }
    }
}

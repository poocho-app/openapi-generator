{{>license}}
import APIError, { WrapError } from '#drivers/api-error';
import Service, { ServiceResponse } from '#services/service';
import httpStatus from 'http-status';
//FIXME: Use types instead of any for all the service level api functions.

{{#operations}}
{{#operation}}
/**
{{#summary}}
* {{{.}}}
{{/summary}}
{{#notes}}
* {{{.}}}
{{/notes}}
*
{{#allParams}}
* {{paramName}} {{{dataType}}} {{{description}}}{{^required}} (optional){{/required}}
{{/allParams}}
{{^returnType}}
* no response value expected for this operation
{{/returnType}}
{{#returnType}}
* returns {{{.}}}
{{/returnType}}
* */
const {{{operationId}}} = ({{#allParams}}{{#-first}}{ {{/-first}}{{^isBodyParam}}{{paramName}}{{/isBodyParam}}{{#isBodyParam}}body{{/isBodyParam}}{{^-last}}, {{/-last}}{{#-last}} }{{/-last}}{{/allParams}}{{#allParams}}{{#-first}}: { {{/-first}}{{^isBodyParam}}{{paramName}}: any{{/isBodyParam}}{{#isBodyParam}}body: any{{/isBodyParam}}{{^-last}}, {{/-last}}{{#-last}} }{{/-last}}{{/allParams}}): Promise<ServiceResponse> => new Promise(
  async (resolve, reject) => {
    try {
      resolve(Service.successResponse({}, 200));
    } catch (err) {
      let apiErr: APIError = WrapError(
            'Internal server error',
            httpStatus.INTERNAL_SERVER_ERROR,
            <Error>err
      );
      reject(apiErr);
    }
  });
{{/operation}}
{{/operations}}

export {
  {{#operations}}
  {{#operation}}
  {{operationId}},
  {{/operation}}
  {{/operations}}
};
